#!/bin/bash

# Directory paths
LOG_DIR="/var/log/apache2"
APACHE_SITES_DIR="/etc/apache2/sites-enabled"

# Color codes for clarity
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Function to filter and display primary log files (e.g., *.log files)
filter_primary_logs() {
    echo -e "${YELLOW}Filtering primary log files...${NC}"
    log_files=()
    index=1

    # Using sudo to list all files in the log directory
    mapfile -t files < <(sudo ls "$LOG_DIR")

    # Check if there are any log files
    if [ ${#files[@]} -eq 0 ]; then
        echo -e "${RED}No log files found in $LOG_DIR.${NC}"
        return
    fi

    # Collect and display log files
    for log in "${files[@]}"; do
        if [[ $log == *.log ]]; then
            log_files+=("$log")
            echo "$index) $log"
            ((index++))
        fi
    done

    if [[ ${#log_files[@]} -eq 0 ]]; then
        echo -e "${RED}No primary log files found.${NC}"
        return
    fi

    # Prompt for user selection
    read -p "Select a log file to view (1-${#log_files[@]}): " log_index

    if [[ $log_index -ge 1 && $log_index -le ${#log_files[@]} ]]; then
        selected_log="${log_files[$((log_index-1))]}"
        echo -e "${YELLOW}Displaying last 25 lines of $selected_log:${NC}"
        sudo tail -n 25 "$LOG_DIR/$selected_log"
    else
        echo -e "${RED}Invalid selection.${NC}"
    fi
}

# Function to purge unmatched logs
purge_unmatched_logs() {
    # Fetch primary logs
    log_files=()
    mapfile -t files < <(sudo ls "$LOG_DIR")

    # Check if there are any log files
    if [ ${#files[@]} -eq 0 ]; then
        echo -e "${RED}No log files found in $LOG_DIR.${NC}"
        return
    fi

    # List enabled Apache sites
    mapfile -t enabled_sites < <(sudo ls "$APACHE_SITES_DIR" | sed 's/\.conf//g')

    # Filter unmatched logs
    unmatched_logs=()
    for log in "${files[@]}"; do
        # Skip log files that are access or error logs
        if [[ "$log" == *"access.log" || "$log" == *"error.log" ]]; then
            continue
        fi

        # Extract domain name from the log filename
        domain_name=$(echo "$log" | sed -E 's/-access\.log$//; s/-error\.log$//')

        # Check if the domain is not in enabled sites
        if [[ ! " ${enabled_sites[*]} " =~ " ${domain_name} " ]]; then
            unmatched_logs+=("$log")
        fi
    done

    # Display unmatched logs and prompt user for action
    if [ ${#unmatched_logs[@]} -eq 0 ]; then
        echo -e "${GREEN}No unmatched log files found.${NC}"
    else
        echo -e "${YELLOW}The following log files don't match any enabled Apache site:${NC}"
        for log in "${unmatched_logs[@]}"; do
            echo "$log"
        done

        read -p "Do you want to delete these unmatched log files? (y/n): " confirm
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
            for log in "${unmatched_logs[@]}"; do
                sudo rm "$LOG_DIR/$log"
                echo -e "${GREEN}Deleted: $log${NC}"
            done
        else
            echo -e "${RED}No files were deleted.${NC}"
        fi
    fi
}

# Function to purge backup logs
purge_backup_logs() {
    echo -e "${YELLOW}Purging backup logs...${NC}"
    backup_logs=()
    
    # Using sudo to find backup files (e.g., *.1, *.tgz)
    mapfile -t files < <(sudo ls "$LOG_DIR")

    for log in "${files[@]}"; do
        if [[ $log =~ \.(1|2|tgz)$ ]]; then
            backup_logs+=("$log")
            echo "$log"
        fi
    done

    if [[ ${#backup_logs[@]} -eq 0 ]]; then
        echo -e "${GREEN}No backup log files found.${NC}"
        return
    fi

    read -p "Do you want to delete these backup log files? (y/n): " confirm
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        for log in "${backup_logs[@]}"; do
            sudo rm "$LOG_DIR/$log"
            echo -e "${GREEN}Deleted: $log${NC}"
        done
    else
        echo -e "${RED}No files were deleted.${NC}"
    fi
}

# Main menu
while true; do
    echo -e "\nMenu:"
    echo "1) Filter Primary Logs"
    echo "2) Purge Unmatched Logs"
    echo "3) Purge Backup Logs"
    echo "4) Exit"
    read -p "Select an option (1-4): " option

    case $option in
        1) filter_primary_logs ;;
        2) purge_unmatched_logs ;;
        3) purge_backup_logs ;;
        4) exit 0 ;;
        *) echo -e "${RED}Invalid option. Please try again.${NC}" ;;
    esac
done
